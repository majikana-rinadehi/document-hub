name: Notion to GitHub Sync
on:
  repository_dispatch:
    types: [notion-article-updated] # カスタムイベントタイプ

permissions:
  contents: write
  pull-requests: write

jobs:
  process-notion-update:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has-changes }}
      entity-id: ${{ steps.create-pr.outputs.entity-id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Debug payload
        run: |
          echo "Event type: ${{ github.event.action }}"
          echo "Client payload: ${{ toJson(github.event.client_payload) }}"

      - name: Process Notion update
        uses: actions/github-script@v7
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const path = require('path');

            // Extract page ID and type from client payload
            const entityId = context.payload.client_payload?.entity?.id.replace(/-/g, "");
            const entityType = context.payload.client_payload?.entity?.type;

            console.log(`Entity ID: ${entityId}`);
            console.log(`Entity Type: ${entityType}`);

            if (!entityId) {
              console.log('No entity ID found in payload, skipping processing');
              return;
            }

            if (entityType !== 'page') {
              console.log(`Entity type '${entityType}' is not 'page', skipping processing`);
              return;
            }

            try {
              // Execute the fetch command
              console.log(`Running: bun run fetch ${entityId}`);
              execSync(`NOTION_API_KEY=${process.env.NOTION_API_KEY} bun run fetch ${entityId}`, { 
                stdio: 'inherit',
                cwd: process.cwd()
              });
              
              console.log('✅ Notion article processed successfully');
            } catch (error) {
              console.error('❌ Failed to process Notion article:', error.message);
              throw error;
            }

      - name: Check for changes
        id: check-changes
        run: |
          if [ -n "$(git status --porcelain output/)" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in output directory"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in output directory"
          fi

      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        if: steps.check-changes.outputs.has-changes == 'true'
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const path = require('path');

            const entityId = context.payload.client_payload?.entity?.id.replace(/-/g, "");

            // Create feature branch
            const branchName = `notion-update-${entityId}-${Date.now()}`;

            try {
              // Configure git
              execSync('git config user.name "github-actions[bot]"');
              execSync('git config user.email "github-actions[bot]@users.noreply.github.com"');
              
              // Create and switch to feature branch
              execSync(`git checkout -b ${branchName}`);
              
              // Add changes
              execSync('git add output/');
              
              // Get list of changed files for commit message
              const changedFiles = execSync('git diff --cached --name-only', { encoding: 'utf8' }).trim().split('\n').filter(f => f);
              
              // Create commit message parts
              const commitTitle = `feat: Update Notion article ${entityId}`;
              const commitBody = [
                '',
                'Updated files:',
                ...changedFiles.map(f => `- ${f}`)
              ].join('\n');
              
              // Commit changes using separate title and body
              execSync(`git commit -m "${commitTitle}" -m "${commitBody}"`);
              
              // Push branch
              execSync(`git push origin ${branchName}`);
              
              // Read PR template
              const templatePath = '.github/pr-template.md';
              const template = fs.readFileSync(templatePath, 'utf8');
              
              // Replace variables in the template
              const prBody = template
                .replace('{{PAGE_ID}}', entityId)
                .replace('{{FILES_LIST}}', changedFiles.map(f => `- \`${f}\``).join('\n'));
              
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Update Notion article: ${entityId}`,
                head: branchName,
                base: 'main',
                body: prBody
              });
              
              console.log(`✅ Pull request created: ${pr.html_url}`);
              
              // Set output for entity ID to be used by next job
              core.setOutput('entity-id', entityId);
              
            } catch (error) {
              console.error('❌ Failed to create pull request:', error.message);
              throw error;
            }

  # Trigger publish-to-zenn workflow after PR creation
  publish-to-zenn:
    needs: process-notion-update
    if: needs.process-notion-update.outputs.has-changes == 'true' && needs.process-notion-update.outputs.entity-id != ''
    uses: ./.github/workflows/publish-to-zenn.yml
    with:
      entity-id: ${{ needs.process-notion-update.outputs.entity-id }}
    secrets: inherit
